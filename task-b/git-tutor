#!/bin/bash

# Color definitions
readonly RED='\033[1;31m'
readonly GREEN='\033[1;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[1;34m'
readonly PURPLE='\033[1;35m'
readonly CYAN='\033[1;36m'
readonly GRAY='\033[1;90m'
readonly NC='\033[0m' # No Color

# Helper Functions

print_section_header() {
    local title=$1
    echo -en "${PURPLE}$title${NC}\n"
}

handle_error() {
    local exit_code=$1
    local error_message=$2
    if [ $exit_code -ne 0 ]; then
        echo -ne "${RED}Error: $error_message${NC}\n" >&2
        exit $exit_code
    fi
}

game_prompt() {
    local level=$1
    if [[ $level == false ]]; then
        echo -en "${YELLOW}> "
        echo -en "${BLUE} "
        return
    fi
    if (($commands_cnt < $level_commands_cnt)); then
        echo -en "${GREEN}($commands_cnt/$level_commands_cnt)${NC}"
    else
        echo -en "${RED}($commands_cnt/$level_commands_cnt)${NC}"
    fi
    echo -en "${YELLOW}> "
    echo -en "${BLUE} "
}

compare_repos() {
    echo -ne "${NC}"
    local play_log="$(log --all)"
    if [[ "$play_log" == "$goal_log" ]]; then
        pass=true
    else
        pass=false
    fi
}

cleanup() {
    cd .. >/dev/null 2>&1
    rm -rf goal play
}

display_log() {
    local play="$1"
    local goal="$2"

    play_display=$(print_section_header "Loading Play\n")
    play_display+="$play"
    goal_display=$(print_section_header "Loading Goal\n")
    goal_display+="$goal"

    # Create temporary files for strings
    temp1=$(mktemp)
    temp2=$(mktemp)

    # Convert strings to lines by replacing newlines and write to temp files
    echo -e "$play_display" >"$temp1"
    echo -e "$goal_display" >"$temp2"

    # Get the length of both string arrays
    len1=$(wc -l <"$temp1")
    len2=$(wc -l <"$temp2")

    # Find the maximum length
    max_len=$((len1 > len2 ? len1 : len2))

    # Add padding to strings and combine with vertical separator
    paste <(
        cat "$temp1"
        if [ $len1 -lt $max_len ]; then yes "" | head -n $((max_len - len1)); fi
    ) \
        <(yes "|" | head -n $max_len) \
        <(
            cat "$temp2"
            if [ $len2 -lt $max_len ]; then yes "" | head -n $((max_len - len2)); fi
        ) |
        column -t -s $'\t'

    # Clean up temporary files
    rm "$temp1" "$temp2"
}

# Freestyle Mode

setup_free_play() {
    local goal=$1
    cd $goal
    goal_log=$(log --all)
    cd ..
    cp -r $base play
    cd play
    play_log=$(log --all)
    display_log "$play_log" "$goal_log"

}

figure_commit_cnt() {
    commits_cnt=0
    message="C$commits_cnt"
    while ! git tag "$message" 2>/dev/null; do
        commits_cnt=$((commits_cnt + 1))
        message="C$commits_cnt"
    done
    git tag -d "$message" >/dev/null 2>&1
}

# Play Mode
choose_level() {
    selected_level=""
    levels_description
    while true; do
        echo -e "${CYAN}Enter the level name to proceed ${RED}(type exit to quit)"
        game_prompt false
        read -r choice
        if [[ ! "$choice" =~ ^[0-9]+$ ]] || ((choice < 1 || choice > ${#levels_titles[@]})); then
            if [[ "$choice" == 'exit' ]]; then
                exit 0
            else
                echo -e "${RED}Invalid level number. Please try again.${NC}"
            fi
        else
            break
        fi
    done
    choice=$((choice - 1))
    selected_level="${levels_titles[choice]}"
}

level_setup() {
    local level_name=$1
    levels $level_name
    level_commands_cnt=$((${#goal[@]} - ${#base[@]}))
    cmd_exe_load 'goal' "${goal[@]}"
    goal_log=$(log --all)
    cd ..
    cmd_exe_load 'play' "${base[@]}"
    play_log=$(log --all)
    display_log "$play_log" "$goal_log"
}

# Plugin Management

load_plugin() {
    local plugin_file=$1
    source "$plugin_file"
    if ! declare -F plugin_init >/dev/null ||
        ! declare -F levels_description >/dev/null ||
        ! declare -F levels >/dev/null; then
        echo -e "${RED}Error: Invalid plugin format in $plugin_file${NC}"
        echo -e "${RED}Plugin must define plugin_init, levels_description, and levels functions${NC}"
        return 1
    fi
    IFS='|' read -r plugin_name plugin_description plugin_version plugin_author < <(plugin_init)
    echo -e "${GREEN}Loaded plugin: $plugin_name v$plugin_version${NC}"
    echo -e "${GRAY}$plugin_description${NC}"
    echo -e "${GRAY}Created by: $plugin_author${NC}"
    return 0
}

install_plugins() {
    plugins=($(ls ~/.git-tutor/*.gt 2>/dev/null))

    if [ ${#plugins[@]} -eq 0 ]; then
        echo -e "${CYAN}No plugins found in ~/.git-tutor${NC}"
        exit 1
    fi

    echo -e "${CYAN}Available Plugins:${NC}"
    for i in "${!plugins[@]}"; do
        plugin_file="${plugins[$i]}"

        # Source temporarily to get metadata
        (
            source "$plugin_file"
            if declare -F plugin_init >/dev/null; then
                IFS='|' read -r name description version author < <(plugin_init)
                echo -e "${YELLOW}[$((i + 1))] $name v$version${NC}"
                echo -e "   ${GRAY}$description${NC}"
                echo -e "   ${GRAY}Author: $author${NC}"
            else
                echo -e "${YELLOW}[$((i + 1))] $(basename "$plugin_file")${NC}"
                echo -e "   ${GRAY}(No metadata available)${NC}"
            fi
        )
    done
    while true; do
        echo -e "${CYAN}Enter the number of the plugin to use ${RED}(type exit to quit)"
        game_prompt false
        read -r choice
        if [[ ! "$choice" =~ ^[0-9]+$ ]] || ((choice < 1 || choice > ${#plugins[@]})); then
            if [[ "$choice" == 'exit' ]]; then
                exit 0
            else
                echo -e "${RED}Invalid plugin number. Please try again.${NC}"
            fi
        else
            break
        fi
    done
    choice=$((choice - 1))
    selected_plugin="${plugins[choice]}"
    if ! load_plugin "$selected_plugin"; then
        echo -e "${RED}Failed to load plugin. Please check its format.${NC}"
        exit 1
    fi
}

# Git Functions

init() {
    repo_name=$1
    git init -b main $repo_name >/dev/null 2>&1
    cd $repo_name >/dev/null 2>&1
    git config user.name git-tutor
    git config user.email git-tutor@gmail.com
}

commit() {
    local amend=$1
    if [[ $amend = '--amend' ]]; then
        local message="$(git log -1 --pretty=%B 2>/dev/null)'"
        while ! git tag "$message" 2>/dev/null; do
            message="$message'"
        done
        git tag -d "$message" >/dev/null 2>&1
        git commit --allow-empty --amend -m "$message" >/dev/null 2>&1
        handle_error $? "Failed to amend commit"
    else
        local message="C$commits_cnt"
        git commit --allow-empty -m "$message" >/dev/null 2>&1
        handle_error $? "Failed to create commit"
        commits_cnt=$((commits_cnt + 1))
    fi
    git tag "$message" >/dev/null 2>&1
    handle_error $? "Failed to create tag"
}

log() {
    local all="$(echo "$1" | grep -c -- '--all')"
    echo -en "${CYAN}"
    if [ $all -ne 0 ]; then
        git log --all --graph --decorate=short --pretty=format:"%d %s" 2>/dev/null |
            sed -E "s/tag: [^,)]*,? ?//g" |
            sed -E "s/, \)/)/g" |
            sed -E "s/\(\)//g" |
            awk -v yellow="$YELLOW" -v green="$GREEN" -v blue="$BLUE" -v nc="$NC" '
    {
        gsub(/\*/, yellow "&" nc);
        gsub(/\/|\\|\|/, blue "&" nc);
        gsub(/\(.*\)/, green "&" nc);
        print $0;
    }'
    else
        git log --graph --decorate=short --pretty=format:"%d %s" 2>/dev/null |
            sed -E "s/tag: [^,)]*,? ?//g" |
            sed -E "s/, \)/)/g" |
            sed -E "s/\(\)//g" |
            awk -v yellow="$YELLOW" -v green="$GREEN" -v blue="$BLUE" -v nc="$NC" '
    {
        gsub(/\*/, yellow "&" nc);
        gsub(/\/|\\|\|/, blue "&" nc);
        gsub(/\(.*\)/, green "&" nc);
        print $0;
    }'

    fi
}

checkout() {
    git checkout "$@" >/dev/null 2>&1
    handle_error $? "Failed to checkout: $@"
}

branch() {
    git branch "$@" >/dev/null 2>&1
    handle_error $? "Failed to create branch: $@"
}

switch() {
    git switch "$@" >/dev/null 2>&1
    handle_error $? "Failed to switch to: $@"
}

revert() {
    local target=$1
    local message="$target'"
    while ! git tag "$message" 2>/dev/null; do
        message="$message'"
    done
    git tag -d "$message" >/dev/null 2>&1
    git commit --allow-empty -m "$message" >/dev/null 2>&1
    handle_error $? "Failed to revert commit: $target"
    git tag "$message" >/dev/null 2>&1
}

reset() {
    local target=$1
    git reset --hard "$target" >/dev/null 2>&1
    handle_error $? "Failed to reset to: $target"
}

merge() {
    local target=$1
    local message="C$commits_cnt"
    git merge --ff-only "$target" -m "$message" >/dev/null 2>&1
    if [[ $? -ne 0 ]]; then
        git merge "$target" -m "$message" >/dev/null 2>&1
        handle_error $? "Failed to merge to: $target" >/dev/null 2>&1
        commits_cnt=$((commits_cnt + 1))
        git tag "$message" >/dev/null 2>&1
        handle_error $? "Failed to create tag $message"
    fi
}

cherry_pick() {
    local commit=$1
    local message="$commit'"
    while ! git tag "$message" 2>/dev/null; do
        message="$message'"
    done
    git tag -d "$message" >/dev/null 2>&1
    git cherry-pick -n --allow-empty --keep-redundant-commits $commit && git commit --allow-empty -m "$message" >/dev/null 2>&1
    git tag "$message" >/dev/null 2>&1
    handle_error $? "Failed to create tag for cherry-pick: $message"
    commits_cnt=$((commits_cnt + 1))
}

rebase() {
    local target=$1
    local current_branch="$(git rev-parse --abbrev-ref HEAD)"
    local commits=($(git log --format=%H "$target..$current_branch" | tac))
    git reset --hard "$target" >/dev/null 2>&1

    for commit in "${commits[@]}"; do
        local message="$(git log -1 --format=%B "$commit" 2>/dev/null)"
        while ! git tag "$message" 2>/dev/null; do
            message="$message'"
        done
        git tag -d "$message" >/dev/null 2>&1
        git commit --allow-empty -m "$message" >/dev/null 2>&1
        handle_error $? "Failed to revert commit: $target"
        git tag "$message" >/dev/null 2>&1
        handle_error $? "Failed to create tag for rebased commit: $message"
    done
}

# Command Executors

cmd_exe_sandbox() {
    commits_cnt=0
    exec 3<&0
    rm -rf sandbox >/dev/null 2>&1
    init sandbox
    show_help
    echo -en "${YELLOW}> "
    echo -en "${BLUE} "
    while IFS= read -r command <&3; do
        IFS=' ' read -r -a tokens <<<"$command"
        if [[ ${tokens[0]} == 'git' ]]; then
            local cmd=${tokens[1]}
            local args=${tokens[@]:2}
            case $cmd in
            commit)
                commit $args
                ;;
            checkout)
                checkout $args
                ;;
            cherry-pick)
                cherry_pick $args
                ;;
            switch)
                switch $args
                ;;
            merge)
                merge $args
                ;;
            rebase)
                rebase $args
                ;;
            branch)
                branch $args
                ;;
            log)
                log $args
                ;;
            revert)
                revert $args
                ;;
            reset)
                reset $args
                ;;
            *)
                echo -ne "${RED}Unknown '$command' command.\nType 'help' for available commands${NC}\n"
                ;;
            esac
        else
            case ${tokens[0]} in
            clear)
                clear
                ;;
            base)
                rm -rf ../base
                cp -r ../sandbox ../base
                ;;
            goal)
                rm -rf ../goal
                cp -r ../sandbox ../goal
                break
                ;;
            reset)
                clear
                cd .. >/dev/null 2>&1
                rm -rf sandbox
                commits_cnt=0
                init sandbox
                ;;
            help)
                show_help
                ;;
            exit)
                break
                ;;
            *)
                echo -ne "${RED}Unknown '$command' command.\nType 'help' for available commands${NC}\n"
                ;;
            esac
        fi
        echo -en "${YELLOW}> "
        echo -en "${BLUE} "
    done
    cd .. >/dev/null 2>&1
    rm -rf sandbox
    exec 3<&-
}

cmd_exe_load() {
    commits_cnt=0
    commands_cnt=0
    local dir_name=$1
    shift
    local source=("$@")
    rm -rf "$dir_name" >/dev/null 2>&1
    init $dir_name
    for cmd in "${source[@]}"; do
        read -ra tokens <<<"$cmd"
        local cmd=${tokens[1]}
        local args=${tokens[@]:2}
        case $cmd in
        commit)
            commit $args
            ;;
        checkout)
            checkout $args
            ;;
        cherry-pick)
            cherry_pick $args
            ;;
        switch)
            switch $args
            ;;
        merge)
            merge $args
            ;;
        rebase)
            rebase $args
            ;;
        branch)
            branch $args
            ;;
        log)
            log $args
            ;;
        revert)
            revert $args
            ;;
        reset)
            reset $args
            ;;
        esac
    done
}

cmd_exe_free() {
    local base=$1
    local goal=$2
    setup_free_play "$goal"
    figure_commit_cnt
    exec 3<&0
    game_prompt false
    while IFS= read -r command <&3; do
        IFS=' ' read -r -a tokens <<<"$command"
        if [[ ${tokens[0]} == 'git' ]]; then
            local cmd=${tokens[1]}
            local args=${tokens[@]:2}
            case $cmd in
            commit)
                commit $args
                commands_cnt=$((commands_cnt + 1))
                ;;
            checkout)
                checkout $args
                commands_cnt=$((commands_cnt + 1))
                ;;
            cherry-pick)
                cherry_pick $args
                commands_cnt=$((commands_cnt + 1))
                ;;
            switch)
                switch $args
                commands_cnt=$((commands_cnt + 1))
                ;;
            merge)
                merge $args
                commands_cnt=$((commands_cnt + 1))
                ;;
            branch)
                branch $args
                commands_cnt=$((commands_cnt + 1))
                ;;
            rebase)
                rebase $args
                commands_cnt=$((commands_cnt + 1))
                ;;
            log)
                log $args
                game_prompt false
                continue
                ;;
            revert)
                revert $args
                commands_cnt=$((commands_cnt + 1))
                ;;
            reset)
                reset $args
                commands_cnt=$((commands_cnt + 1))
                ;;
            *)
                echo -ne "${RED}Unknown '$command' command.\nType 'help' for available commands${NC}\n"
                game_prompt false
                continue
                ;;
            esac
            play_log="$(log --all)"
        else
            case ${tokens[0]} in
            description)
                echo -ne "${RED}Not Supported In Free Play${NC}"
                ;;
            hint)
                echo -ne "${RED}Not Supported In Free Play${NC}"
                ;;
            clear)
                clear
                display_log "$play_log" "$goal_log"
                game_prompt false
                continue
                ;;
            reset)
                clear
                commands_cnt=0
                cd ..
                rm -rf play
                setup_free_play "$goal"
                figure_commit_cnt
                game_prompt false
                continue
                ;;
            help)
                show_help
                game_prompt false
                continue
                ;;
            exit)
                break
                ;;
            *)
                echo -ne "${RED}Unknown '$command' command.\nType 'help' for available commands${NC}\n"
                game_prompt false
                continue
                ;;
            esac
        fi
        display_log "$play_log" "$goal_log"
        compare_repos
        if [[ $pass == true ]]; then
            echo -ne "${GREEN}🎉 Congratulations!${NC}\n"
            echo -e "${YELLOW} You've used '$commands_cnt' commands to reach the goal${NC}"
            break
        fi
        game_prompt false
    done
    cd .. >/dev/null 2>&1
    rm -rf play
}

cmd_exe_play() {
    local level_name=$1
    exec 3<&0
    game_prompt true
    while IFS= read -r command <&3; do
        IFS=' ' read -r -a tokens <<<"$command"
        if [[ ${tokens[0]} == 'git' ]]; then
            local cmd=${tokens[1]}
            local args=${tokens[@]:2}
            case $cmd in
            commit)
                commit $args
                commands_cnt=$((commands_cnt + 1))
                ;;
            checkout)
                checkout $args
                commands_cnt=$((commands_cnt + 1))
                ;;
            cherry-pick)
                cherry_pick $args
                commands_cnt=$((commands_cnt + 1))
                ;;
            switch)
                switch $args
                commands_cnt=$((commands_cnt + 1))
                ;;
            merge)
                merge $args
                commands_cnt=$((commands_cnt + 1))
                ;;
            branch)
                branch $args
                commands_cnt=$((commands_cnt + 1))
                ;;
            rebase)
                rebase $args
                commands_cnt=$((commands_cnt + 1))
                ;;
            log)
                log $args
                game_prompt true
                continue
                ;;
            revert)
                revert $args
                commands_cnt=$((commands_cnt + 1))
                ;;
            reset)
                reset $args
                commands_cnt=$((commands_cnt + 1))
                ;;
            *)
                echo -ne "${RED}Unknown '$command' command.\nType 'help' for available commands${NC}\n"
                game_prompt true
                continue
                ;;
            esac
            play_log="$(log --all)"
        else
            case ${tokens[0]} in
            description)
                echo -ne "${YELLOW}$level_description${NC}"
                ;;
            hint)
                echo -ne "${YELLOW}$level_hint${NC}"
                ;;
            clear)
                clear
                cd ..
                rm -rf goal
                old_commits_cnt=$commits_cnt
                old_commands_cnt=$commands_cnt
                cmd_exe_load 'goal' "${goal[@]}"
                goal_log=$(log --all)
                cd ..
                commits_cnt=$old_commits_cnt
                commands_cnt=$old_commands_cnt
                cd play
                play_log=$(log --all)
                display_log "$play_log" "$goal_log"
                game_prompt true
                continue
                ;;
            reset)
                clear
                cd ..
                rm -rf goal play
                commits_cnt=0
                commands_cnt=0
                level_setup $level_name
                game_prompt true
                continue
                ;;
            help)
                show_help
                game_prompt true
                continue
                ;;
            exit)
                break
                ;;
            *)
                echo -ne "${RED}Unknown '$command' command.\nType 'help' for available commands${NC}\n"
                game_prompt true
                continue
                ;;
            esac
        fi
        display_log "$play_log" "$goal_log"
        compare_repos
        if [[ $pass == true ]]; then
            echo -ne "${GREEN}🎉 Congratulations!${NC}\n"
            cleanup
            if (($commands_cnt <= $level_commands_cnt)); then
                echo -e "${GREEN}The max commands required was '$level_commands_cnt' and yours was '$commands_cnt'${NC}"
            else
                echo -e "${RED}The max commands required was '$level_commands_cnt' and yours was '$commands_cnt'${NC}"
                echo -e "${RED}Try again, but better!${NC}"
                echo -ne "${YELLOW}$level_hint${NC}"
            fi
            exit 0
        fi
        game_prompt true
    done
    cleanup
}

show_help() {
    echo -e "
${GREEN}Usage:${NC}
  ${YELLOW}git-tutor sandbox${NC}               Start sandbox mode
  ${YELLOW}git-tutor play${NC}                  Start playing a specific level
  ${YELLOW}git-tutor diff <base> <target>${NC}  Start Playing in freestyle

${GREEN}Git Commands:${NC}
  ${YELLOW}commit [--amend]${NC}                Create a new commit
  ${YELLOW}checkout [-b] <ref>${NC}             Checkout or create a branch
  ${YELLOW}switch [-c] <ref>${NC}               Switch or create a branch
  ${YELLOW}cherry-pick <commit>${NC}            Cherry-pick a commit to current branch
  ${YELLOW}rebase <branch>${NC}                 Rebase current branch onto specified branch
  ${YELLOW}branch <name>${NC}                   Create a new branch
  ${YELLOW}merge <name>${NC}                    Merge Branches
  ${YELLOW}log [--all]${NC}                     Show commit history
  ${YELLOW}revert <commit>${NC}                 Revert a commit
  ${YELLOW}reset <ref>${NC}                     Reset HEAD to specified commit

${GREEN}Tool Commands:${NC}
  ${YELLOW}Description${NC}                     Shows Level Description
  ${YELLOW}Hint${NC}                            Show Hint on How to solve the Level
  ${YELLOW}base${NC}                            Generate a base repository from sandbox for freestyle play
  ${YELLOW}goal${NC}                            Generate a goal repository from sandbox for freestyle play
  ${YELLOW}clear${NC}                           Clear screen and show progress
  ${YELLOW}reset${NC}                           Reset current level
  ${YELLOW}help${NC}                            Show this help message
  ${YELLOW}exit${NC}                            Exit the game
"
}

main() {
    local mode=$1
    if [[ "$#" -eq 0 ]]; then
        show_help
        exit 0
    elif [[ "$mode" == 'sandbox' && "$#" -eq 1 ]]; then
        cmd_exe_sandbox
    elif [[ "$mode" == 'play' && "$#" -eq 1 ]]; then
        install_plugins
        choose_level
        level_setup "$selected_level"
        cmd_exe_play "$selected_level"
    elif [[ "$mode" == 'diff' && "$#" -eq 3 ]]; then
        local base=$2
        local goal=$3
        cmd_exe_free "$base" "$goal"
    else
        show_help
        exit 1
    fi
}

main "$@"
